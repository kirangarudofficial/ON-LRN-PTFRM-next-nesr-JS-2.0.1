// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String?  @unique
  firstName String?
  lastName  String?
  avatar    String?
  bio       String?
  
  // Authentication
  password     String?
  emailVerified DateTime?
  isActive      Boolean @default(true)
  
  // OAuth
  googleId    String? @unique
  appleId     String? @unique
  
  // Role & Permissions
  role        UserRole @default(STUDENT)
  
  // Instructor specific
  isInstructor Boolean @default(false)
  instructorProfile InstructorProfile?
  
  // Preferences
  language    String @default("en")
  timezone    String @default("UTC")
  theme       String @default("system")
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLogin DateTime?
  
  // Relations
  refreshTokens RefreshToken[]
  
  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("refresh_tokens")
}

model InstructorProfile {
  id     String @id @default(cuid())
  userId String @unique
  
  // Professional Info
  title       String?
  company     String?
  website     String?
  linkedinUrl String?
  twitterUrl  String?
  
  // Teaching Info
  expertise     String[] // Array of expertise areas
  experience    Int?     // Years of experience
  rating        Float    @default(0)
  totalStudents Int      @default(0)
  totalCourses  Int      @default(0)
  
  // Verification
  isVerified    Boolean @default(false)
  verifiedAt    DateTime?
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("instructor_profiles")
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
  SUPER_ADMIN
}