// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Quiz {
  id          String     @id @default(cuid())
  title       String
  description String?
  courseId    String
  lectureId   String?
  timeLimit   Int?       // in minutes
  attempts    Int        @default(1)
  passingScore Float     @default(70)
  isActive    Boolean    @default(true)
  
  // Relations
  questions Question[]
  submissions QuizSubmission[]
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("quizzes")
}

model Question {
  id          String       @id @default(cuid())
  quizId      String
  type        QuestionType
  question    String
  options     Json?        // For multiple choice questions
  correctAnswer String
  explanation String?
  points      Float        @default(1)
  order       Int
  
  // Relations
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers QuizAnswer[]
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("questions")
}

model QuizSubmission {
  id          String   @id @default(cuid())
  quizId      String
  userId      String
  score       Float
  totalPoints Float
  percentage  Float
  passed      Boolean
  timeSpent   Int      // in seconds
  attempt     Int      @default(1)
  
  // Relations
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers QuizAnswer[]
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("quiz_submissions")
}

model QuizAnswer {
  id           String @id @default(cuid())
  submissionId String
  questionId   String
  answer       String
  isCorrect    Boolean
  points       Float
  
  // Relations
  submission QuizSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  question   Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  // Metadata
  createdAt DateTime @default(now())
  
  @@map("quiz_answers")
}

model Assignment {
  id          String @id @default(cuid())
  title       String
  description String
  courseId    String
  lectureId   String?
  dueDate     DateTime?
  maxPoints   Float
  isActive    Boolean @default(true)
  
  // Relations
  submissions AssignmentSubmission[]
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("assignments")
}

model AssignmentSubmission {
  id           String           @id @default(cuid())
  assignmentId String
  userId       String
  content      String
  fileUrl      String?
  score        Float?
  feedback     String?
  status       SubmissionStatus @default(SUBMITTED)
  
  // Relations
  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  gradedAt  DateTime?
  
  @@map("assignment_submissions")
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
  ESSAY
  FILL_IN_BLANK
}

enum SubmissionStatus {
  SUBMITTED
  GRADING
  GRADED
  RETURNED
}