// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cart {
  id     String @id @default(cuid())
  userId String @unique
  
  // Relations
  items CartItem[]
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("carts")
}

model CartItem {
  id       String @id @default(cuid())
  cartId   String
  courseId String
  price    Float
  
  // Relations
  cart Cart @relation(fields: [cartId], references: [id], onDelete: Cascade)
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([cartId, courseId])
  @@map("cart_items")
}

model Order {
  id            String      @id @default(cuid())
  userId        String
  orderNumber   String      @unique
  subtotal      Float
  tax           Float       @default(0)
  discount      Float       @default(0)
  total         Float
  currency      String      @default("USD")
  status        OrderStatus @default(PENDING)
  paymentMethod String?
  paymentId     String?
  
  // Relations
  items OrderItem[]
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  completedAt DateTime?
  
  @@map("orders")
}

model OrderItem {
  id            String @id @default(cuid())
  orderId       String
  courseId      String
  title         String
  price         Float
  discountPrice Float?
  
  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("order_items")
}

model Coupon {
  id          String     @id @default(cuid())
  code        String     @unique
  type        CouponType
  value       Float      // percentage or fixed amount
  minAmount   Float?     // minimum order amount
  maxDiscount Float?     // maximum discount amount
  usageLimit  Int?       // null = unlimited
  usageCount  Int        @default(0)
  isActive    Boolean    @default(true)
  validFrom   DateTime
  validUntil  DateTime
  
  // Relations
  usages CouponUsage[]
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("coupons")
}

model CouponUsage {
  id       String @id @default(cuid())
  couponId String
  userId   String
  orderId  String
  discount Float
  
  // Relations
  coupon Coupon @relation(fields: [couponId], references: [id], onDelete: Cascade)
  
  // Metadata
  createdAt DateTime @default(now())
  
  @@unique([couponId, userId, orderId])
  @@map("coupon_usages")
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  REFUNDED
}

enum CouponType {
  PERCENTAGE
  FIXED_AMOUNT
}